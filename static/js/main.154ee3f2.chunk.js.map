{"version":3,"sources":["components/Background.js","components/QuoteBox.js","components/Quote.js","components/ButtonsBar.js","App.js","serviceWorker.js","index.js"],"names":["Background","props","react_default","a","createElement","style","backgroundImage","concat","backgroundColor","color","className","children","QuoteBox","id","Quote","borderLeft","quote","author","ButtonsBar","href","encodeURI","rel","target","class","onClick","onNewQuote","randomColor","require","axios","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","cat","_this2","get","then","response","data","luminosity","setState","catch","error","console","log","src_components_Background","window","innerWidth","innerHeight","src_components_QuoteBox","src_components_Quote","src_components_ButtonsBar","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.154ee3f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Background.scss\";\r\n\r\nconst Background = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage: `url(${props.backgroundImage})`,\r\n        backgroundColor: `${props.color}`\r\n      }}\r\n      className=\"background\"\r\n    >\r\n      <div className=\"container\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Background;\r\n","import React from \"react\";\r\nimport \"./QuoteBox.scss\";\r\n\r\nconst QuoteBox = props => {\r\n  return (\r\n    <div id=\"quote-box\" className=\"card buttons-bar flow-text\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteBox;\r\n","import React from \"react\";\r\nimport \"./Quote.scss\";\r\n\r\nconst Quote = props => {\r\n  return (\r\n    <div className=\"quote\">\r\n      <blockquote\r\n        className=\"quote__text\"\r\n        style={{ borderLeft: `5px solid ${props.color}` }}\r\n      >\r\n        <p id=\"text\">\"{props.quote}\"</p>\r\n      </blockquote>\r\n\r\n      <cite id=\"author\">\r\n        <p className=\"quote__author center-align\">â€“ {props.author}</p>\r\n      </cite>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import React from \"react\";\r\nimport \"./ButtonsBar.scss\";\r\n\r\nconst ButtonsBar = props => {\r\n  return (\r\n    <div id=\"buttons-bar\" className=\"card-action\">\r\n      <a\r\n        className=\"buttons-bar__tweet btn\"\r\n        id=\"tweet-quote\"\r\n        href={encodeURI(\r\n          `https://twitter.com/intent/tweet?text=\"${props.quote}\" - ${\r\n            props.author\r\n          }`\r\n        )}\r\n        style={{ backgroundColor: props.color }}\r\n        rel=\"noopener noreferrer\"\r\n        target=\"_blank\"\r\n      >\r\n        <i class=\"fab fa-twitter\" />\r\n      </a>\r\n\r\n      <button\r\n        className=\"buttons-bar__new-quote btn\"\r\n        id=\"new-quote\"\r\n        onClick={props.onNewQuote}\r\n        style={{ backgroundColor: props.color }}\r\n      >\r\n        New Quote\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonsBar;\r\n","import React, { Component } from \"react\";\r\nimport Background from \"./components/Background\";\r\nimport QuoteBox from \"./components/QuoteBox\";\r\nimport Quote from \"./components/Quote\";\r\nimport ButtonsBar from \"./components/ButtonsBar\";\r\n\r\nconst randomColor = require(\"randomcolor\");\r\nconst axios = require(\"axios\");\r\n\r\nexport default class App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.onNewQuote = this.onNewQuote.bind(this);\r\n\r\n    this.state = {\r\n      author: \"\",\r\n      cat: \"\",\r\n      quote: \"\",\r\n      color: \"\"\r\n    };\r\n  }\r\n\r\n  /* Life Cycle Methods */\r\n\r\n  componentDidMount() {\r\n    this.onNewQuote();\r\n  }\r\n\r\n  /* Event Handlers */\r\n\r\n  onNewQuote() {\r\n    axios\r\n      .get(\"https://talaikis.com/api/quotes/random/\")\r\n      .then(response => {\r\n        // handle success\r\n        let data = response.data;\r\n        data.color = randomColor({ luminosity: \"dark\" });\r\n        this.setState(data);\r\n      })\r\n      .catch(error => {\r\n        // handle error\r\n        console.log(error);\r\n        this.setState({\r\n          author: \"Pythagoras\",\r\n          cat: \"silence\",\r\n          quote: \"A fool is known by his speech; and a wise man by silence.\",\r\n          color: randomColor({ luminosity: \"dark\" })\r\n        });\r\n      });\r\n  }\r\n\r\n  /* Render Method */\r\n\r\n  render() {\r\n    return (\r\n      <Background\r\n        // \"cat\" state change causes request of new background image\r\n        backgroundImage={`https://source.unsplash.com/random/${\r\n          window.innerWidth\r\n        }x${window.innerHeight}/?${this.state.cat}`}\r\n        color={this.state.color}\r\n      >\r\n        <QuoteBox>\r\n          <Quote\r\n            author={this.state.author}\r\n            color={this.state.color}\r\n            quote={this.state.quote}\r\n          />\r\n          <ButtonsBar\r\n            author={this.state.author}\r\n            color={this.state.color}\r\n            onNewQuote={this.onNewQuote}\r\n            quote={this.state.quote}\r\n          />\r\n        </QuoteBox>\r\n      </Background>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.scss\";\r\nimport \"materialize-css/dist/css/materialize.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}