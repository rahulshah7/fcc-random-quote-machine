{"version":3,"sources":["API/getQuoteData.js","API/getBackgroundImage.js","components/Background.js","components/ButtonsBar.js","components/QuoteBox.js","components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["getQuoteData","Promise","resolve","axios","get","then","response","_response$data","data","author","category","cat","quote","getBackgroundImage","searchTerm","concat","window","innerWidth","innerHeight","request","responseURL","Background","props","react_default","a","createElement","style","backgroundImage","className","react_transition_group","in","fadeBool","classNames","timeout","transitionDuration","children","ButtonsBar","id","href","encodeURI","backgroundColor","color","rel","target","onClick","onNewQuote","QuoteBox","Quote","borderLeft","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","fallbackData","randomColor","luminosity","state","objectSpread","_this2","isFirstMount","arguments","length","undefined","quoteData","setState","URL","catch","error","console","log","_this3","_this$state","components_Background","components_QuoteBox","components_Quote","components_ButtonsBar","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcd9d1e9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/* Return random quote data */\r\n\r\nconst getQuoteData = () =>\r\n  new Promise(resolve => {\r\n    axios.get(\"https://talaikis.com/api/quotes/random/\").then(response => {\r\n      const { author, cat: category, quote } = response.data;\r\n      resolve({ author, category, quote });\r\n    });\r\n  });\r\n\r\nexport default getQuoteData;\r\n","import axios from \"axios\";\r\n\r\n/* Return background image URL given a search term */\r\n\r\nconst getBackgroundImage = searchTerm =>\r\n  new Promise(resolve => {\r\n    axios\r\n      .get(\r\n        `https://source.unsplash.com/random/${window.innerWidth}x${\r\n          window.innerHeight\r\n        }/?${searchTerm}`\r\n      )\r\n      .then(response => {\r\n        resolve(response.request.responseURL);\r\n      });\r\n  });\r\n\r\nexport default getBackgroundImage;\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst Background = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage: `url(${props.backgroundImage})`\r\n      }}\r\n      className=\"background blue-grey lighten-4\"\r\n    >\r\n      <CSSTransition\r\n        in={props.fadeBool}\r\n        classNames=\"overlay\"\r\n        timeout={props.transitionDuration}\r\n      >\r\n        <div className=\"background-overlay blue-grey lighten-4\" />\r\n      </CSSTransition>\r\n      <div className=\"container\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Background;\r\n","import React from \"react\";\r\n\r\nconst ButtonsBar = props => {\r\n  return (\r\n    <div id=\"buttons-bar\" className=\"card-action\">\r\n      <a\r\n        className=\"buttons-bar__tweet btn waves-effect waves-light\"\r\n        id=\"tweet-quote\"\r\n        href={encodeURI(\r\n          `https://twitter.com/intent/tweet?text=\"${props.quote}\" - ${\r\n            props.author\r\n          }`\r\n        )}\r\n        style={{ backgroundColor: props.color }}\r\n        rel=\"noopener noreferrer\"\r\n        target=\"_blank\"\r\n      >\r\n        <i className=\"fab fa-twitter\" />\r\n      </a>\r\n\r\n      <button\r\n        className=\"buttons-bar__new-quote btn waves-effect waves-light\"\r\n        id=\"new-quote\"\r\n        onClick={props.onNewQuote}\r\n        style={{ backgroundColor: props.color }}\r\n      >\r\n        New Quote\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonsBar;\r\n","import React from \"react\";\r\n\r\nconst QuoteBox = props => {\r\n  return (\r\n    <div id=\"quote-box\" className=\"card flow-text\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteBox;\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst Quote = props => {\r\n  return (\r\n    <div className=\"quote\">\r\n      <blockquote\r\n        className=\"quote__text\"\r\n        style={{ borderLeft: `5px solid ${props.color}` }}\r\n      >\r\n        <CSSTransition\r\n          in={props.fadeBool}\r\n          classNames=\"fade-quote\"\r\n          timeout={props.transitionDuration}\r\n        >\r\n          <p id=\"text\">\"{props.quote}\"</p>\r\n        </CSSTransition>\r\n      </blockquote>\r\n\r\n      <cite id=\"author\">\r\n        <CSSTransition\r\n          in={props.fadeBool}\r\n          classNames=\"fade-quote\"\r\n          timeout={props.transitionDuration}\r\n        >\r\n          <p className=\"quote__author center-align\">â€“ {props.author}</p>\r\n        </CSSTransition>\r\n      </cite>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import randomColor from \"randomcolor\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport getQuoteData from \"./API/getQuoteData\";\r\nimport getBackgroundImage from \"./API/getBackgroundImage\";\r\n\r\nimport Background from \"./components/Background\";\r\nimport ButtonsBar from \"./components/ButtonsBar\";\r\nimport QuoteBox from \"./components/QuoteBox\";\r\nimport Quote from \"./components/Quote\";\r\n\r\n/*When adjusting, also set an equal value in _variables.scss e.g.\r\n```scss```\r\n$transition-duration: 1000ms;\r\n````js```\r\nconst transitionDuration = 1000; */\r\nconst transitionDuration = 750;\r\n\r\nexport default class App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.onNewQuote = this.onNewQuote.bind(this);\r\n\r\n    this.fallbackData = {\r\n      author: \"Pythagoras\",\r\n      backgroundImage: \"\",\r\n      category: \"silence\",\r\n      quote: \"A fool is known by his speech; and a wise man by silence.\",\r\n      color: randomColor({ luminosity: \"dark\" })\r\n    };\r\n\r\n    this.state = {\r\n      ...this.fallbackData,\r\n      fadeBool: false\r\n    };\r\n  }\r\n\r\n  /* Life Cycle Methods */\r\n\r\n  componentDidMount() {\r\n    this.onNewQuote(true);\r\n  }\r\n\r\n  /* Event Handlers */\r\n\r\n  onNewQuote(isFirstMount = false) {\r\n    getQuoteData()\r\n      .then(quoteData => {\r\n        if (!isFirstMount) {\r\n          // trigger fade out quote\r\n          this.setState({ fadeBool: false });\r\n        }\r\n\r\n        let data = {\r\n          ...quoteData,\r\n          color: randomColor({ luminosity: \"dark\" }),\r\n          fadeBool: true\r\n        };\r\n\r\n        // Update data with background image\r\n        getBackgroundImage(quoteData.category).then(URL => {\r\n          data.backgroundImage = URL;\r\n          // Update state to trigger fade in new quote\r\n          this.setState(data);\r\n        });\r\n      })\r\n      .catch(error => {\r\n        // handle error\r\n        console.log(error);\r\n        this.setState(this.fallbackData);\r\n      });\r\n  }\r\n\r\n  /* Render Method */\r\n\r\n  render() {\r\n    const { author, backgroundImage, color, fadeBool, quote } = this.state;\r\n\r\n    return (\r\n      <Background\r\n        // \"category\" state change causes request of new background image\r\n        backgroundImage={backgroundImage}\r\n        color={color}\r\n        fadeBool={fadeBool}\r\n        transitionDuration={transitionDuration}\r\n      >\r\n        <QuoteBox>\r\n          <Quote\r\n            author={author}\r\n            color={color}\r\n            fadeBool={fadeBool}\r\n            quote={quote}\r\n            transitionDuration={transitionDuration}\r\n          />\r\n          <ButtonsBar\r\n            author={author}\r\n            color={color}\r\n            onNewQuote={() => this.onNewQuote(false)}\r\n            quote={quote}\r\n          />\r\n        </QuoteBox>\r\n      </Background>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"materialize-css/dist/js/materialize.min.js\";\r\nimport \"materialize-css/dist/css/materialize.min.css\";\r\nimport \"./styles/App.scss\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}