{"version":3,"sources":["components/Buttons.js","components/Quote.js","components/QuoteBox.js","serviceWorker.js","index.js"],"names":["Buttons","props","react_default","a","createElement","className","id","href","encodeURI","concat","quote","author","target","rel","onClick","onNewQuote","Quote","axios","require","QuoteBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","cat","_this2","get","then","response","setState","data","catch","error","console","log","components_Quote","components_Buttons","Component","Boolean","window","location","hostname","match","ReactDOM","render","QuoteBox_QuoteBox","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRA8BeA,EA5BC,SAAAC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,iBACVC,GAAG,cACHC,KAAMC,UAAS,0CAAAC,OAC6BR,EAAMS,MADnC,QAAAD,OAEXR,EAAMU,SAGVC,OAAO,SACPC,IAAI,uBATN,SAcAX,EAAAC,EAAAC,cAAA,UACEU,QAASb,EAAMc,WACfT,GAAG,YACHD,UAAU,sBAHZ,eCFSW,SAdD,SAAAf,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,cAAYC,UAAU,eACpBH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAQL,EAAMS,QAGtBR,EAAAC,EAAAC,cAAA,QAAME,GAAG,SAASD,UAAU,iBAA5B,UACKJ,EAAMU,WCNXM,SAAQC,EAAQ,KAEDC,cACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKR,WAAaK,EAAKL,WAAWY,KAAhBN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KAElBA,EAAKS,MAAQ,CACXlB,OAAQ,GACRmB,IAAK,GACLpB,MAAO,IAPGU,mFAcZG,KAAKR,kDAKM,IAAAgB,EAAAR,KACXN,EACGe,IAAI,2CACJC,KAAK,SAAAC,GAEJH,EAAKI,SAASD,EAASE,QAExBC,MAAM,SAAAC,GAELC,QAAQC,IAAIF,GACZP,EAAKI,SAAS,CACZxB,OAAQ,aACRmB,IAAK,UACLpB,MAAO,kGAQb,OACER,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YAAYD,UAAU,aAC5BH,EAAAC,EAAAC,cAACqC,EAAD,CAAO/B,MAAOa,KAAKM,MAAMnB,MAAOC,OAAQY,KAAKM,MAAMlB,SACnDT,EAAAC,EAAAC,cAACsC,EAAD,CACE3B,WAAYQ,KAAKR,WACjBL,MAAOa,KAAKM,MAAMnB,MAClBC,OAAQY,KAAKM,MAAMlB,iBA/CSgC,aCKlBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAAcC,SAASC,eAAe,SD0HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.cebb78d8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Buttons = props => {\r\n  return (\r\n    <div className=\"buttons\">\r\n      <a\r\n        className=\"buttons__tweet\"\r\n        id=\"tweet-quote\"\r\n        href={encodeURI(\r\n          `https://twitter.com/intent/tweet?text=\"${props.quote}\" - ${\r\n            props.author\r\n          }`\r\n        )}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Tweet\r\n      </a>\r\n\r\n      <button\r\n        onClick={props.onNewQuote}\r\n        id=\"new-quote\"\r\n        className=\"buttons__new-quote\"\r\n      >\r\n        New Quote\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./quote.scss\";\r\n\r\nconst Quote = props => {\r\n  return (\r\n    <div className=\"quote\">\r\n      <blockquote className=\"quote__text\">\r\n        <p id=\"text\">{props.quote}</p>\r\n      </blockquote>\r\n\r\n      <cite id=\"author\" className=\"quote__author\">\r\n        â€“ {props.author}\r\n      </cite>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import React, { Component } from \"react\";\r\nimport Buttons from \"./Buttons\";\r\nimport Quote from \"./Quote\";\r\nimport \"./quote-box.scss\";\r\n\r\nconst axios = require(\"axios\");\r\n\r\nexport default class QuoteBox extends Component {\r\n  constructor() {\r\n    super();\r\n    this.onNewQuote = this.onNewQuote.bind(this);\r\n\r\n    this.state = {\r\n      author: \"\",\r\n      cat: \"\",\r\n      quote: \"\"\r\n    };\r\n  }\r\n\r\n  /* Life Cycle Methods */\r\n\r\n  componentDidMount() {\r\n    this.onNewQuote();\r\n  }\r\n\r\n  /* Event Handlers */\r\n\r\n  onNewQuote() {\r\n    axios\r\n      .get(\"https://talaikis.com/api/quotes/random/\")\r\n      .then(response => {\r\n        // handle success\r\n        this.setState(response.data);\r\n      })\r\n      .catch(error => {\r\n        // handle error\r\n        console.log(error);\r\n        this.setState({\r\n          author: \"Pythagoras\",\r\n          cat: \"silence\",\r\n          quote: \"A fool is known by his speech; and a wise man by silence. \"\r\n        });\r\n      });\r\n  }\r\n\r\n  /* Render Method */\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"quote-box\" className=\"quote-box\">\r\n        <Quote quote={this.state.quote} author={this.state.author} />\r\n        <Buttons\r\n          onNewQuote={this.onNewQuote}\r\n          quote={this.state.quote}\r\n          author={this.state.author}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport QuoteBox from \"./components/QuoteBox\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.scss\";\nimport \"normalize.css\";\n\nReactDOM.render(<QuoteBox />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}