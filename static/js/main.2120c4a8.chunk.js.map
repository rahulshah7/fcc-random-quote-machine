{"version":3,"sources":["API/getQuoteData.js","API/getBackgroundImage.js","components/Background.js","components/ButtonsBar.js","components/QuoteBox.js","components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["offlineQuotes","require","getQuoteData","Promise","resolve","axios","get","then","response","_response$data","data","author","category","quote","catch","Math","floor","random","length","getBackgroundImage","searchTerm","concat","window","innerWidth","innerHeight","request","responseURL","Background","props","react_default","a","createElement","style","backgroundImage","className","react_transition_group","in","fadeBool","classNames","timeout","transitionDuration","children","ButtonsBar","id","href","encodeURI","backgroundColor","color","rel","target","onClick","onNewQuote","QuoteBox","Quote","borderLeft","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","initialQuoteData","objectSpread","randomColor","luminosity","state","_this2","isFirstMount","arguments","undefined","quoteData","setState","URL","_this3","_this$state","src_components_Background","src_components_QuoteBox","src_components_Quote","src_components_ButtonsBar","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2120c4a8.chunk.js","sourcesContent":["import axios from \"axios\";\nconst endpoint = \"https://randomquote-api.herokuapp.com/api/random-quote\";\nconst offlineQuotes = require(\"./offlineQuotes.json\");\n\n/**\n * Retrieve a random quote.\n * @returns {Promise<object>} A promise that contains a quote object when\n * fulfilled.\n */\nconst getQuoteData = () =>\n  new Promise(resolve => {\n    axios\n      .get(endpoint)\n      .then(response => {\n        const { author, category, quote } = response.data;\n        resolve({ author, category, quote });\n      })\n      .catch(() => {\n        resolve(\n          offlineQuotes[Math.floor(Math.random() * offlineQuotes.length)]\n        );\n      });\n  });\n\nexport default getQuoteData;\n","import axios from \"axios\";\n\n/**\n * Retrieve a background image URL given a search term.\n * @param {string} searchTerm\n * @returns {Promise<string>} A promise that contains a background image URL\n * string when fulfilled.\n */\nconst getBackgroundImage = searchTerm =>\n  new Promise(resolve => {\n    axios\n      .get(\n        `https://source.unsplash.com/random/${window.innerWidth}x${\n          window.innerHeight\n        }/?${searchTerm}`\n      )\n      .then(response => {\n        resolve(response.request.responseURL);\n      })\n      .catch(() => resolve(\"\"));\n  });\n\nexport default getBackgroundImage;\n","import { CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport \"./Background.scss\";\n\nconst Background = props => (\n  <div\n    style={{\n      backgroundImage: `url(${props.backgroundImage})`\n    }}\n    className=\"background blue-grey lighten-4\"\n  >\n    <CSSTransition\n      in={props.fadeBool}\n      classNames=\"overlay\"\n      timeout={props.transitionDuration}\n    >\n      <div className=\"background-overlay blue-grey lighten-4\" />\n    </CSSTransition>\n    <div className=\"container\">{props.children}</div>\n  </div>\n);\n\nBackground.propTypes = {\n  backgroundImage: PropTypes.string,\n  fadeBool: PropTypes.bool,\n  transitionDuration: PropTypes.number\n};\n\nexport default Background;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport \"./ButtonsBar.scss\";\n\nconst ButtonsBar = props => (\n  <div id=\"buttons-bar\" className=\"card-action\">\n    <a\n      className=\"buttons-bar__tweet btn waves-effect waves-light\"\n      id=\"tweet-quote\"\n      href={encodeURI(\n        `https://twitter.com/intent/tweet?text=\"${props.quote}\" - ${\n          props.author\n        }`\n      )}\n      style={{ backgroundColor: props.color }}\n      rel=\"noopener noreferrer\"\n      target=\"_blank\"\n    >\n      <i className=\"fab fa-twitter\" />\n    </a>\n\n    <button\n      className=\"buttons-bar__new-quote btn waves-effect waves-light\"\n      id=\"new-quote\"\n      onClick={props.onNewQuote}\n      style={{ backgroundColor: props.color }}\n    >\n      New Quote\n    </button>\n  </div>\n);\n\nButtonsBar.propTypes = {\n  author: PropTypes.string,\n  color: PropTypes.string,\n  onNewQuote: PropTypes.func,\n  quote: PropTypes.string\n};\n\nexport default ButtonsBar;\n","import React from \"react\";\nimport \"./QuoteBox.scss\";\n\nconst QuoteBox = props => (\n  <div id=\"quote-box\" className=\"card flow-text\">\n    {props.children}\n  </div>\n);\n\nexport default QuoteBox;\n","import { CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport \"./Quote.scss\";\n\nconst Quote = props => (\n  <div className=\"quote\">\n    <blockquote\n      className=\"quote__text\"\n      style={{ borderLeft: `5px solid ${props.color}` }}\n    >\n      <CSSTransition\n        in={props.fadeBool}\n        classNames=\"fade-quote\"\n        timeout={props.transitionDuration}\n      >\n        <p id=\"text\">\"{props.quote}\"</p>\n      </CSSTransition>\n    </blockquote>\n\n    <cite id=\"author\">\n      <CSSTransition\n        in={props.fadeBool}\n        classNames=\"fade-quote\"\n        timeout={props.transitionDuration}\n      >\n        <p className=\"quote__author center-align\">â€“ {props.author}</p>\n      </CSSTransition>\n    </cite>\n  </div>\n);\n\nQuote.propTypes = {\n  author: PropTypes.string,\n  color: PropTypes.string,\n  fadeBool: PropTypes.bool,\n  quote: PropTypes.string,\n  transitionDuration: PropTypes.number\n};\n\nexport default Quote;\n","import randomColor from \"randomcolor\";\nimport React, { Component } from \"react\";\n\nimport getQuoteData from \"./API/getQuoteData\";\nimport getBackgroundImage from \"./API/getBackgroundImage\";\n\nimport Background from \"./components/Background\";\nimport ButtonsBar from \"./components/ButtonsBar\";\nimport QuoteBox from \"./components/QuoteBox\";\nimport Quote from \"./components/Quote\";\n\nconst offlineQuotes = require(\"./API/offlineQuotes.json\");\n\n/* When adjusting transitionDuration, also set an equal value in _variables.scss e.g.\n```scss\n$transition-duration: 1000ms;\n```\n```javascript\nconst transitionDuration = 1000;\n``` */\nconst transitionDuration = 750;\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.onNewQuote = this.onNewQuote.bind(this);\n\n    this.initialQuoteData = {\n      ...offlineQuotes[Math.floor(Math.random() * offlineQuotes.length)],\n      backgroundImage: \"\",\n      color: randomColor({ luminosity: \"dark\" })\n    };\n\n    this.state = {\n      ...this.initialQuoteData,\n      fadeBool: false\n    };\n  }\n\n  componentDidMount() {\n    this.onNewQuote(true);\n  }\n\n  onNewQuote(isFirstMount = false) {\n    getQuoteData().then(quoteData => {\n      if (!isFirstMount) {\n        // trigger fade out quote\n        this.setState({ fadeBool: false });\n      }\n\n      let data = {\n        ...quoteData,\n        color: randomColor({ luminosity: \"dark\" }),\n        fadeBool: true\n      };\n\n      getBackgroundImage(quoteData.category).then(URL => {\n        data.backgroundImage = URL;\n        // Update state to trigger fade in new quote\n        this.setState(data);\n      });\n    });\n  }\n\n  render() {\n    const { author, backgroundImage, color, fadeBool, quote } = this.state;\n\n    return (\n      <Background\n        // \"category\" state change causes request of new background image\n        backgroundImage={backgroundImage}\n        fadeBool={fadeBool}\n        transitionDuration={transitionDuration}\n      >\n        <QuoteBox>\n          <Quote\n            author={author}\n            color={color}\n            fadeBool={fadeBool}\n            quote={quote}\n            transitionDuration={transitionDuration}\n          />\n          <ButtonsBar\n            author={author}\n            color={color}\n            onNewQuote={() => this.onNewQuote(false)}\n            quote={quote}\n          />\n        </QuoteBox>\n      </Background>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"materialize-css/dist/js/materialize.min.js\";\nimport \"materialize-css/dist/css/materialize.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}